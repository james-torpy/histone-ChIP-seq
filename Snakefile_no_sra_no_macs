# to qsub snakemake:
#source activate snakemake
#briR
#module load 

#qsub -N H3K27ac_cell_lines -b y -wd /share/ScratchGeneral/jamtor/projects/hgsoc_repeats/histone-ChIP-seq/ -j y -R y -pe smp 9 -V \
#"snakemake -s /share/ScratchGeneral/jamtor/projects/hgsoc_repeats/histone-ChIP-seq/Snakefile \
#--cores 3"


import os
import re

exp_name = 'H3K27ac_cell_lines'

home_dir = '/share/ScratchGeneral/jamtor/'
project_dir = home_dir + '/projects/hgsoc_repeats/histone-ChIP-seq/'
in_dir = project_dir + '/raw_files/fastq/' + exp_name
SAMPLES = [ re.sub('_pass.fastq.gz', '', x) for x in list(os.walk(in_dir))[0][2] ]

#input_sample = 'SRR1983929-input_1'

# define/create directories:
#sra_dir = 'raw_files/sra/' + exp_name + '/'

fastq_dir = 'raw_files/fastq/' + exp_name + '/'
if not os.path.exists(project_dir + 'raw_files/fastq/' + exp_name + '/'):
	os.makedirs(project_dir + 'raw_files/fastq/' + exp_name + '/')

fastqc_dir = 'results/fastqc/' + exp_name + '/'
if not os.path.exists(project_dir + 'results/fastqc/' + exp_name + '/'):
	os.makedirs(project_dir + 'results/fastqc/' + exp_name + '/')

bwa_dir = 'results/bwa/' + exp_name + '/'
if not os.path.exists(project_dir + 'results/bwa/' + exp_name + '/'):
	os.makedirs(project_dir + 'results/bwa/' + exp_name + '/')

spp_dir = 'results/spp/' + exp_name + '/'
if not os.path.exists(project_dir + 'results/spp/' + exp_name + '/'):
	os.makedirs(project_dir + 'results/spp/' + exp_name + '/')

macs_dir = 'results/macs2/' + exp_name + '/'
if not os.path.exists(project_dir + 'results/macs2/' + exp_name + '/'):
	os.makedirs(project_dir + 'results/macs2/' + exp_name + '/')

# convert all SAMPLE sras to fastqs and move to correct directory:
#for s in SAMPLES:
#	if os.path.isfile(project_dir + 'raw_files/fastq/' + exp_name + 
#		'/' + s + '_pass.fastq.gz'):
#		print(project_dir + 'raw_files/fastq/' + exp_name + 
#		'/' + s + '_pass.fastq.gz already exists')
#	else:
#		print('Creating ' + project_dir + 'raw_files/fastq/' + 
#			exp_name + '/' + s + '.fastq.gz')
#		os.system('fastq-dump --outdir ' + project_dir + 
#			'raw_files/fastq/' + exp_name + '/' + ' --gzip ' + 
#			'--skip-technical --readids --read-filter pass ' + 
#			'--dumpbase --split-3 --clip ' + sra_dir + '/' + s + 
#			'.sra')

# add only narrow peak samples to list for macs_narrow job:
for i in range(0,len(SAMPLES)):
	print(i)
	if 'H3K4' in SAMPLES[i] or 'H3K27ac' in SAMPLES[i]:
		print('is narrow peak H3K4 or H3K27ac sample')
		if i==0:
			nar = [SAMPLES[i]]
		else:
			nar.append(SAMPLES[i])

# add only broad peak samples to list for macs_narrow job:
for i in range(0,len(SAMPLES)):
	print(i)
	if 'H3K27me3' in SAMPLES[i] or 'H3K9me3' in SAMPLES[i]:
		print('is broad peak H3K27me3 or H3K9me3 sample')
		if i==0:
			brd = [SAMPLES[i]]
		else:
			brd.append(SAMPLES[i])

if 'nar' in globals() and 'brd' in globals():
	print('Both narrow and broak peaks samples exist')
	rule all:
		input:
			#expand(macs_dir + '{sample}_peaks.narrowPeak', sample=nar),
			#expand(macs_dir + '{sample}_peaks.broadPeak', sample=brd),
			expand(spp_dir + '{sample}.spp.result', sample=SAMPLES),
			expand(bwa_dir + '{sample}.sorted.bam.bai', sample=SAMPLES),
			expand('genomes/repeats/bwa/hg38_ercc_all_repbase.bwa.amb', sample=SAMPLES),
			expand(fastqc_dir + '{sample}_pass_fastqc.html', sample=SAMPLES)

elif 'nar' in globals() and 'brd' not in globals():
	print('Only narrow peak samples exist')
	rule all:
		input:
			#expand(macs_dir + '{sample}_peaks.narrowPeak', sample=nar),
			expand(spp_dir + '{sample}.spp.result', sample=SAMPLES),
			expand(bwa_dir + '{sample}.sorted.bam.bai', sample=SAMPLES),
			expand('genomes/repeats/bwa/hg38_ercc_all_repbase.bwa.amb', sample=SAMPLES),
			expand(fastqc_dir + '{sample}_pass_fastqc.html', sample=SAMPLES)

elif 'brd' in globals() and 'nar' not in globals():
	print('Only broak peak samples exist')
	rule all:
		input:
			#expand(macs_dir + '{sample}_peaks.broadPeak', sample=brd),
			expand(spp_dir + '{sample}.spp.result', sample=SAMPLES),
			expand(bwa_dir + '{sample}.sorted.bam.bai', sample=SAMPLES),
			expand('genomes/repeats/bwa/hg38_ercc_all_repbase.bwa.amb', sample=SAMPLES),
			expand(fastqc_dir + '{sample}_pass_fastqc.html', sample=SAMPLES)

rule fastqc:
	input:
		fastq_dir + '{sample}_pass.fastq.gz'
	output:
		fastqc_dir + '{sample}_pass_fastqc.html',
		fastqc_dir + '{sample}_pass_fastqc.zip'
	shell:
		'fastqc -t 2 -o ' + fastqc_dir + ' {input}'

rule bwa_index:
	input:
		'genomes/repeats/hg38_ercc_all_repbase.fa'
	output:
		'genomes/repeats/bwa/hg38_ercc_all_repbase.bwa.amb'
		'genomes/repeats/bwa/hg38_ercc_all_repbase.bwa.ann'
		'genomes/repeats/bwa/hg38_ercc_all_repbase.bwa.bwt'
		'genomes/repeats/bwa/hg38_ercc_all_repbase.bwa.pac'
		'genomes/repeats/bwa/hg38_ercc_all_repbase.bwa.sa'
	shell:
		'bwa index -p genomes/repeats/bwa/hg38_ercc_all_repbase.bwa {input}'

rule bwa_align:
	input:
		fasq = fastq_dir + '{sample}_pass.fastq.gz',
		fqc = fastqc_dir + '{sample}_pass_fastqc.html'
	output:
		bwa_dir + '{sample}.sai'
	threads: 8
	shell:
		'bwa aln -f {output} genomes/repeats/bwa/hg38_ercc_all_repbase.bwa {input.fasq}'

rule bwa_samse:
	input:
		sai = bwa_dir + '{sample}.sai',
		fq = fastq_dir + '{sample}_pass.fastq.gz'
	output:
		bwa_dir + '{sample}.sam'
	shell:
		'bwa samse -f {output} genomes/repeats/bwa/hg38_ercc_all_repbase.bwa \
			{input.sai} {input.fq}'

rule samtools_filter:
	input:
		bwa_dir + '{sample}.sam'
	output:
		bwa_dir + '{sample}.sorted.bam'
	shell:
		'samtools view -u -F260 -q10 {input}  | samtools sort -o {output} \
		-O bam -T ' + bwa_dir + '{wildcards.sample}.tmp -@ 2 -'


rule samtools_index:
	input:
		bwa_dir + '{sample}.sorted.bam'
	output:
		bwa_dir + '{sample}.sorted.bam.bai'
	shell:
		'samtools index {input}'

rule remove_dupes:
	input:
		bam = bwa_dir + '{sample}.sorted.bam',
		bai = bwa_dir + '{sample}.sorted.bam.bai'
	output:
		rmdup = bwa_dir + '{sample}.sorted.rmdup.bam',
		met = bwa_dir + '{sample}.sorted.rmdupmet.bam'
	threads: 2
	shell:
		'java -jar /home/jamtor/local/lib/picard/build/libs/picard.jar \
		MarkDuplicates I={input.bam} O={output.rmdup} M={output.met} \
		REMOVE_DUPLICATES=true VALIDATION_STRINGENCY=LENIENT'

rule spp:
	input:
		bwa_dir + '{sample}.sorted.rmdup.bam'
	output:
		spp_dir + '{sample}.spp.result'
	shell:
		'Rscript /home/jamtor/local/lib/phantompeakqualtools/run_spp.R \
		-c={input} -i={input} -savp -p=2 -odir=' + spp_dir +
		' -out={output}'

#rule macs_narrow:
#	input:
#		bwa_dir + '{sample}.sorted.rmdup.bam'
#	output:
#		macs_dir + '{sample}_peaks.narrowPeak'
#	shell:
#		'source activate p2.7env; ' +
#		'/home/jamtor/local/lib/MACS/bin/macs2 callpeak -t ' +
#		'{input} -c ' +
#		bwa_dir + input_sample + '.sorted.rmdup.bam' +
#		' --name "{wildcards.sample}" ' +
#		'--outdir ' + macs_dir
#
#rule macs_broad:
#	input:
#		bwa_dir + '{sample}.sorted.rmdup.bam'
#	output:
#		macs_dir + '{sample}_peaks.broadPeak'
#	shell:
#		'source activate p2.7env; ' +
#		'/home/jamtor/local/lib/MACS/bin/macs2 callpeak -t ' +
#		'{input} -c ' +
#		bwa_dir + input_sample + '.sorted.rmdup.bam' +
#		' --broad' +
#		' --name "{wildcards.sample}" ' +
#		'--outdir ' + macs_dir
#
#