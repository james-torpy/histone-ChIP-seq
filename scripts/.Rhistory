posGenes[posGenes$FDR<  FDRthresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR< FDRthresh,])>0) {
negGenes[negGenes$FDR<  FDRthresh,]$threshold <-  "NEGSIG"
}
lab <- rbind(rbind(sig, posGenes), negGenes)
repGenes <- rbind(rbind(repGenes,   posGenes), negGenes)
lab$genes <- rownames(lab)
if (!(ctlInd==1)) {
if (i==1) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==1) {
sigReps <- list(sigRep)
} else {
sigReps[[i]] <- sigRep
}
} else {
if (i==2) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==2) {
sigReps <- list(sigRep)
} else {
sigReps[[i]] <- sigRep
}
}
}
}
# specify what FDR and log2 fold change thresholds to use:
FDRthresh <- 0.05
FCthresh <- 1
for (i in 1:ncol(design)) {
print(i)
if (i!=ctlInd) {
comp <- paste0(sTypes[i], "_vs_", ctl)
# perform likelihood ratio test:
con[i] <- 1
lrt <- glmLRT(fit, contrast = con)
# determine the top DE genes:
topTags(lrt)
if (file.exists(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))) {
print(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds already exists, no need to create"))
} else {
print(paste0("Creating ", newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
saveRDS(lrt, file = paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
}
# fetch summary of differentially expressed genes (those  with FDR =< 0.05:
DEs <- summary(result <- decideTestsDGE((lrt)))
# fetch all gene DE info,
allGenes <- as.data.frame(topTags(lrt, n=Inf))
# define repeat and sig DE repeat dfs:
repGenes <- allGenes[grep("ENS",  rownames(allGenes), invert = T),]
print(repGenes)
if ( is.na(FCthresh) ) {
sigGenes <- filter(repGenes, FDR < FDRthresh)
repGenes$threshold <- as.factor(repGenes$FDR < FDRthresh)
} else if ( is.na(FDRthresh) ) {
sigGenes <- repGenes[(repGenes$logFC > FCthresh)|(repGenes$logFC < -(FCthresh)), ]
repGenes$threshold <- as.factor( (repGenes$logFC > FCthresh)|(repGenes$logFC < -(FCthresh)) )
} else {
sigGenes <- filter(repGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
repGenes$threshold <- as.factor((repGenes$FDR < FDRthresh & repGenes$logFC < -(FCthresh))|(repGenes$FDR <  FDRthresh & repGenes$logFC > FCthresh))
}
sig_rep <- subset(repGenes, threshold == T)
# include the control genes for labelling:
for (j in 1:length(posGeneIDs)) {
if (j==1) {
posGenes <- allGenes[ posGeneIDs[j],]
} else {
posGenes <- rbind(posGenes, allGenes[posGeneIDs[j],])
}
}
rownames(posGenes) <- posGeneNames
for (j in 1:length(negGeneIDs)) {
if (j==1) {
negGenes <- allGenes[ negGeneIDs[j],]
} else {
negGenes <- rbind(negGenes,   allGenes[negGeneIDs[j],])
}
}
rownames(negGenes) <- negGeneNames
# set default threshold statuses  for control genes:
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR< FDRthresh,])>0) {
posGenes[posGenes$FDR<  FDRthresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR< FDRthresh,])>0) {
negGenes[negGenes$FDR<  FDRthresh,]$threshold <-  "NEGSIG"
}
lab <- rbind(rbind(sig, posGenes), negGenes)
repGenes <- rbind(rbind(repGenes,   posGenes), negGenes)
lab$genes <- rownames(lab)
if (!(ctlInd==1)) {
if (i==1) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==1) {
sigReps <- list(sigRep)
} else {
sigReps[[i]] <- sigRep
}
} else {
if (i==2) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==2) {
sigReps <- list(sigRep)
} else {
sigReps[[i]] <- sigRep
}
}
}
}
# specify control genes to include:
posGeneIDs <- c("ENSG00000111640", "ENSG00000196776")
posGeneNames <- c("GAPDH", "CD47")
negGeneIDs <- c("ENSG00000075624", "ENSG00000169919")
negGeneNames <- c("beta-actin", "GUSB")
for (i in 1:ncol(design)) {
print(i)
if (i!=ctlInd) {
comp <- paste0(sTypes[i], "_vs_", ctl)
# perform likelihood ratio test:
con[i] <- 1
lrt <- glmLRT(fit, contrast = con)
# determine the top DE genes:
topTags(lrt)
if (file.exists(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))) {
print(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds already exists, no need to create"))
} else {
print(paste0("Creating ", newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
saveRDS(lrt, file = paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
}
# fetch summary of differentially expressed genes (those  with FDR =< 0.05:
DEs <- summary(result <- decideTestsDGE((lrt)))
# fetch all gene DE info,
allGenes <- as.data.frame(topTags(lrt, n=Inf))
# define repeat and sig DE repeat dfs:
repGenes <- allGenes[grep("ENS",  rownames(allGenes), invert = T),]
print(repGenes)
if ( is.na(FCthresh) ) {
sigGenes <- filter(repGenes, FDR < FDRthresh)
repGenes$threshold <- as.factor(repGenes$FDR < FDRthresh)
} else if ( is.na(FDRthresh) ) {
sigGenes <- repGenes[(repGenes$logFC > FCthresh)|(repGenes$logFC < -(FCthresh)), ]
repGenes$threshold <- as.factor( (repGenes$logFC > FCthresh)|(repGenes$logFC < -(FCthresh)) )
} else {
sigGenes <- filter(repGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
repGenes$threshold <- as.factor((repGenes$FDR < FDRthresh & repGenes$logFC < -(FCthresh))|(repGenes$FDR <  FDRthresh & repGenes$logFC > FCthresh))
}
sig_rep <- subset(repGenes, threshold == T)
# include the control genes for labelling:
for (j in 1:length(posGeneIDs)) {
if (j==1) {
posGenes <- allGenes[ posGeneIDs[j],]
} else {
posGenes <- rbind(posGenes, allGenes[posGeneIDs[j],])
}
}
rownames(posGenes) <- posGeneNames
for (j in 1:length(negGeneIDs)) {
if (j==1) {
negGenes <- allGenes[ negGeneIDs[j],]
} else {
negGenes <- rbind(negGenes,   allGenes[negGeneIDs[j],])
}
}
rownames(negGenes) <- negGeneNames
# set default threshold statuses  for control genes:
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR< FDRthresh,])>0) {
posGenes[posGenes$FDR<  FDRthresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR< FDRthresh,])>0) {
negGenes[negGenes$FDR<  FDRthresh,]$threshold <-  "NEGSIG"
}
lab <- rbind(rbind(sig, posGenes), negGenes)
repGenes <- rbind(rbind(repGenes,   posGenes), negGenes)
lab$genes <- rownames(lab)
if (!(ctlInd==1)) {
if (i==1) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==1) {
sigReps <- list(sigRep)
} else {
sigReps[[i]] <- sigRep
}
} else {
if (i==2) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==2) {
sigReps <- list(sigRep)
} else {
sigReps[[i]] <- sigRep
}
}
}
}
i=2
i!=ctlInd
comp <- paste0(sTypes[i], "_vs_", ctl)
# perform likelihood ratio test:
con[i] <- 1
lrt <- glmLRT(fit, contrast = con)
# determine the top DE genes:
topTags(lrt)
if (file.exists(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))) {
print(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds already exists, no need to create"))
} else {
print(paste0("Creating ", newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
saveRDS(lrt, file = paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
}
# fetch summary of differentially expressed genes (those  with FDR =< 0.05:
DEs <- summary(result <- decideTestsDGE((lrt)))
# fetch all gene DE info,
allGenes <- as.data.frame(topTags(lrt, n=Inf))
# define repeat and sig DE repeat dfs:
repGenes <- allGenes[grep("ENS",  rownames(allGenes), invert = T),]
print(repGenes)
if ( is.na(FCthresh) ) {
sigGenes <- filter(repGenes, FDR < FDRthresh)
repGenes$threshold <- as.factor(repGenes$FDR < FDRthresh)
} else if ( is.na(FDRthresh) ) {
sigGenes <- repGenes[(repGenes$logFC > FCthresh)|(repGenes$logFC < -(FCthresh)), ]
repGenes$threshold <- as.factor( (repGenes$logFC > FCthresh)|(repGenes$logFC < -(FCthresh)) )
} else {
sigGenes <- filter(repGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
repGenes$threshold <- as.factor((repGenes$FDR < FDRthresh & repGenes$logFC < -(FCthresh))|(repGenes$FDR <  FDRthresh & repGenes$logFC > FCthresh))
}
sig_rep <- subset(repGenes, threshold == T)
# include the control genes for labelling:
for (j in 1:length(posGeneIDs)) {
if (j==1) {
posGenes <- allGenes[ posGeneIDs[j],]
} else {
posGenes <- rbind(posGenes, allGenes[posGeneIDs[j],])
}
}
rownames(posGenes) <- posGeneNames
for (j in 1:length(negGeneIDs)) {
if (j==1) {
negGenes <- allGenes[ negGeneIDs[j],]
} else {
negGenes <- rbind(negGenes,   allGenes[negGeneIDs[j],])
}
}
rownames(negGenes) <- negGeneNames
# set default threshold statuses  for control genes:
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR< FDRthresh,])>0) {
posGenes[posGenes$FDR<  FDRthresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR< FDRthresh,])>0) {
negGenes[negGenes$FDR<  FDRthresh,]$threshold <-  "NEGSIG"
}
if (!(ctlInd==1)) {
if (i==1) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==1) {
sigReps <- list(sigRep)
} else {
sigReps[[i]] <- sigRep
}
} else {
if (i==2) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==2) {
sigReps <- list(sigRep)
} else {
sigReps[[i]] <- sigRep
}
}
print(i)
if ( i!=ctlInd ) {
comp <- paste0(sTypes[i], "_vs_", ctl)
# perform likelihood ratio test:
con[i] <- 1
lrt <- glmLRT(fit, contrast = con)
# determine the top DE genes:
topTags(lrt)
if (file.exists(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))) {
print(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds already exists, no need to create"))
} else {
print(paste0("Creating ", newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
saveRDS(lrt, file = paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
}
# fetch summary of differentially expressed genes (those  with FDR =< 0.05:
DEs <- summary(result <- decideTestsDGE((lrt)))
# fetch all gene DE info,
allGenes <- as.data.frame(topTags(lrt, n=Inf))
# define repeat and sig DE repeat dfs:
repGenes <- allGenes[grep("ENS",  rownames(allGenes), invert = T),]
print(repGenes)
if ( is.na(FCthresh) ) {
sigGenes <- filter(repGenes, FDR < FDRthresh)
repGenes$threshold <- as.factor(repGenes$FDR < FDRthresh)
} else if ( is.na(FDRthresh) ) {
sigGenes <- repGenes[(repGenes$logFC > FCthresh)|(repGenes$logFC < -(FCthresh)), ]
repGenes$threshold <- as.factor( (repGenes$logFC > FCthresh)|(repGenes$logFC < -(FCthresh)) )
} else {
sigGenes <- filter(repGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
repGenes$threshold <- as.factor((repGenes$FDR < FDRthresh & repGenes$logFC < -(FCthresh))|(repGenes$FDR <  FDRthresh & repGenes$logFC > FCthresh))
}
sig_rep <- subset(repGenes, threshold == T)
# include the control genes for labelling:
for (j in 1:length(posGeneIDs)) {
if (j==1) {
posGenes <- allGenes[ posGeneIDs[j],]
} else {
posGenes <- rbind(posGenes, allGenes[posGeneIDs[j],])
}
}
rownames(posGenes) <- posGeneNames
for (j in 1:length(negGeneIDs)) {
if (j==1) {
negGenes <- allGenes[ negGeneIDs[j],]
} else {
negGenes <- rbind(negGenes,   allGenes[negGeneIDs[j],])
}
}
rownames(negGenes) <- negGeneNames
# set default threshold statuses  for control genes:
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR< FDRthresh,])>0) {
posGenes[posGenes$FDR<  FDRthresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR< FDRthresh,])>0) {
negGenes[negGenes$FDR<  FDRthresh,]$threshold <-  "NEGSIG"
}
if (!(ctlInd==1)) {
if (i==1) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==1) {
sigReps <- list(sig_rep)
} else {
sigReps[[i]] <- sig_rep
}
} else {
if (i==2) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==2) {
sigReps <- list(sig_rep)
} else {
sigReps[[i]] <- sig_rep
}
}
}
if (length(FCthresh) == 0) {
sigGenes <- filter(allGenes, FDR < FDRthresh)
allGenes$threshold <- as.factor(allGenes$FDR < FDRthresh)
} else {
sigGenes <- filter(allGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
allGenes$threshold <- as.factor((allGenes$FDR < FDRthresh & allGenes$logFC < -(FCthresh))|(allGenes$FDR <  FDRthresh & allGenes$logFC > FCthresh))
}
sig_gc <- subset(allGenes, threshold == T)
# for rows with ensembl ids, annotate entrez ids and symbols in separate columns:
sig_gc$gene_id <- egENSEMBL$gene_id[match(rownames(sig), egENSEMBL$ensembl_id)]
sig_gc$symbol <- egSYMBOL$symbol[match(sig$gene_id, egSYMBOL$gene_id)]
library(org.Hs.eg.db)
egENSEMBL <- toTable(org.Hs.egENSEMBL)
egSYMBOL <- toTable(org.Hs.egSYMBOL)
sig_gc$gene_id <- egENSEMBL$gene_id[match(rownames(sig), egENSEMBL$ensembl_id)]
sig_gc$symbol <- egSYMBOL$symbol[match(sig$gene_id, egSYMBOL$gene_id)]
allGenes$gene_id <- egENSEMBL$gene_id[match(rownames(allGenes), egENSEMBL$ensembl_id)]
allGenes$symbol <- egSYMBOL$symbol[match(allGenes$gene_id, egSYMBOL$gene_id)]
egENSEMBL <- toTable(org.Hs.egENSEMBL)
egSYMBOL <- toTable(org.Hs.egSYMBOL)
allGenes$gene_id <- egENSEMBL$gene_id[match(rownames(allGenes), egENSEMBL$ensembl_id)]
allGenes$symbol <- egSYMBOL$symbol[match(allGenes$gene_id, egSYMBOL$gene_id)]
repGenes <- allGenes[grep("ENS",  rownames(allGenes), invert = T),]
print(repGenes)
if ( is.na(FCthresh) ) {
sigGenes <- filter(repGenes, FDR < FDRthresh)
repGenes$threshold <- as.factor(repGenes$FDR < FDRthresh)
} else if ( is.na(FDRthresh) ) {
sigGenes <- repGenes[
(repGenes$logFC > FCthresh)|(repGenes$logFC < -(FCthresh)), ]
repGenes$threshold <- as.factor(
(repGenes$logFC > FCthresh)|(repGenes$logFC < -(FCthresh))
)
} else {
sigGenes <- filter(
repGenes,
(FDR < FDRthresh & logFC < -(FCthresh))|(
FDR < FDRthresh & logFC > FCthresh
)
)
repGenes$threshold <- as.factor(
(repGenes$FDR < FDRthresh & repGenes$logFC < -(FCthresh))|(
repGenes$FDR <  FDRthresh & repGenes$logFC > FCthresh
)
)
}
sig_rep <- subset(repGenes, threshold == T)
# include the control genes for labelling:
for (j in 1:length(posGeneIDs)) {
if (j==1) {
posGenes <- allGenes[ posGeneIDs[j],]
} else {
posGenes <- rbind(posGenes, allGenes[posGeneIDs[j],])
}
}
rownames(posGenes) <- posGeneNames
for (j in 1:length(negGeneIDs)) {
if (j==1) {
negGenes <- allGenes[ negGeneIDs[j],]
} else {
negGenes <- rbind(negGenes,   allGenes[negGeneIDs[j],])
}
}
rownames(negGenes) <- negGeneNames
# set default threshold statuses for control genes:
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR< FDRthresh,])>0) {
posGenes[posGenes$FDR<  FDRthresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR< FDRthresh,])>0) {
negGenes[negGenes$FDR<  FDRthresh,]$threshold <-  "NEGSIG"
}
if (!(ctlInd==1)) {
if (i==1) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==1) {
sigReps <- list(sig_rep)
} else {
sigReps[[i]] <- sig_rep
}
} else {
if (i==2) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==2) {
sigReps <- list(sig_rep)
} else {
sigReps[[i]] <- sig_rep
}
}
if (length(FCthresh) == 0) {
sigGenes <- filter(allGenes, FDR < FDRthresh)
allGenes$threshold <- as.factor(allGenes$FDR < FDRthresh)
} else {
sigGenes <- filter(allGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
allGenes$threshold <- as.factor((allGenes$FDR < FDRthresh & allGenes$logFC < -(FCthresh))|(allGenes$FDR <  FDRthresh & allGenes$logFC > FCthresh))
}
sig_gc <- subset(allGenes, threshold == T)
head(sig_gc)
if (!(ctlInd==1)) {
if (i==1) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
} else {
if (i==2) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
}
head(allGenes)
sig_gc <- subset(allGenes, threshold == T)
if (!(ctlInd==1)) {
if (i==1) {
sig_gc_GenesList <- list(sig_gc)
} else {
sig_gc_GenesList[[i]] <- sig_gc
}
} else {
if (i==2) {
sig_gc_GenesList <- list(sig_gc)
} else {
sig_gc_GenesList[[i]] <- sig_gc
}
}
