})
x <- fake_read_gr[[1]]
x
x <- subset(x, select=-read_id)
c(x, fake_ACTB)
x
fake_ACTB
fake_ACTB <- subset(fake_ACTB, select=-ID)
fake_ACTB
c(x, fake_ACTB)
fake_read_gr <- lapply(fake_read_gr, function(x) {
x <- subset(x, select=-read_id)
return(c(x, fake_ACTB))
})
fake_read_gr
ctls$RPS8
fake_read_gr[[1]]
fake_read_gr
RPS8_hits <- intersect(fake_read_gr[[1]], ctls$RPS8)
RPS8_hits
fake_read_gr[start(ranges(fake_read_gr)) == 44775363]
fake_read_gr[[1]][start(ranges(fake_read_gr[[1]])) == 44775363]
ctls$RPS8[start(ranges(ctls$RPS8)) > 44775360 & start(ranges(ctls$RPS8)) < 44775401]
ctls$RPS8
ctls$RPS8[start(ranges(ctls$RPS8)) > 44775360 & end(ranges(ctls$RPS8)) < 44775401]
ctls$RPS8[start(ranges(ctls$RPS8)) > 44775000 & start(ranges(ctls$RPS8)) < 44775500]
RPS8_hits
RPS8_hits <- findOverlaps(fake_read_gr[[1]], ctls$RPS8)
RPS8_hits
fake_read_gr[[1]][fake_read_gr[[1]]]
fake_read_gr[[1]][385461]
ctls$RPS8
RPS8_hits <- findOverlaps(fake_read_gr[[1]], ctls$RPS8)$queryHits
RPS8_hits <- queryHits(findOverlaps(fake_read_gr[[1]], ctls$RPS8))
RPS8_hits
fake_read_gr[[1]] <- fake_read_gr[[1]][-RPS8_hits]
findOverlaps(fake_read_gr[[1]], ctls$RPS8)
test <- lapply(fake_read_gr, function(x) {
RPS8_hits <- queryHits(findOverlaps(x, ctls$RPS8))
return(x[-RPS8_hits])
})
lapply(test, length
)
fake_read_gr <- read_gr
test <- lapply(fake_read_gr, function(x) {
RPS8_hits <- queryHits(findOverlaps(x, ctls$RPS8))
return(x[-RPS8_hits])
})
lapply(test, length)
lapply(fake_read_gr, length)
# re-run log odds on the fake data set:
for ( j in 1:length(fake_read_gr) ) {
if (j==1) {
rp_read_odds <- list(parLapply(cl, rp_annot, oddsRatio, fake_read_gr[[j]]))
names(rp_read_odds)[j] <- names(fake_read_gr)[j]
ctl_read_odds <- list(parLapply(cl, ctls, oddsRatio, fake_read_gr[[j]]))
names(ctl_read_odds)[j] <- names(fake_read_gr)[j]
} else {
rp_read_odds[[j]] <- parLapply(cl, rp_annot, oddsRatio, fake_read_gr[[j]])
names(rp_read_odds)[j] <- names(fake_read_gr)[j]
ctl_read_odds[[j]] <- parLapply(cl, ctls, oddsRatio, fake_read_gr[[j]])
names(ctl_read_odds)[j] <- names(fake_read_gr)[j]
}
}
# re-run log odds on the fake data set:
for ( j in 1:length(fake_read_gr) ) {
if (j==1) {
fake_ctl_read_odds <- list(parLapply(cl, ctls, oddsRatio, fake_read_gr[[j]]))
names(fake_ctl_read_odds)[j] <- names(fake_read_gr)[j]
} else {
fake_ctl_read_odds[[j]] <- parLapply(cl, ctls, oddsRatio, fake_read_gr[[j]])
names(fake_ctl_read_odds)[j] <- names(fake_read_gr)[j]
}
}
# re-run log odds on the fake data set:
for ( j in 1:length(fake_read_gr) ) {
if (j==1) {
fake_ctl_read_odds <- list(parLapply(cl, ctls, oddsRatio, fake_read_gr[[j]]))
names(fake_ctl_read_odds)[j] <- names(fake_read_gr)[j]
} else {
fake_ctl_read_odds[[j]] <- parLapply(cl, ctls, oddsRatio, fake_read_gr[[j]])
names(fake_ctl_read_odds)[j] <- names(fake_read_gr)[j]
}
}
# re-run log odds on the fake data set:
for ( j in 1:length(fake_read_gr) ) {
if (j==1) {
fake_ctl_read_odds <- list(lapply(ctls, oddsRatio, fake_read_gr[[j]]))
names(fake_ctl_read_odds)[j] <- names(fake_read_gr)[j]
} else {
fake_ctl_read_odds[[j]] <- lapply(ctls, oddsRatio, fake_read_gr[[j]])
names(fake_ctl_read_odds)[j] <- names(fake_read_gr)[j]
}
}
fake_ctl_read_odds
fake_ctl_read_odds <- lapply(fake_ctl_read_odds, function(x) {
return(do.call("rbind", x))
})
fake_ctl_read_odds
database <- ctls$ACTB
region <- fake_read_gr[[1]]
region
chrs <- seqlengths(Hsapiens)[!grepl("_",names(seqlengths(Hsapiens)))]
chr_gr <- GRanges(seqnames=names(chrs),IRanges(1,chrs))
# for a given nucleotide in region, what are the odds it overlaps with
# database ranges:
region_length <- sum(as.numeric(width(region)))
reduced_database <- reduce(database)
strand(region)="*"
strand(reduced_database)="*"
# calculate the length of all region hits with database:
region_hits <- sum(width(intersect(region,reduced_database)))
region_hits
region
fake_ACTB
intersect(region, fake_ACTB)
# remove all hits with RPS8 regions and add fake ACTB reads:
fake_read_gr <- lapply(fake_read_gr, function(x) {
RPS8_hits <- queryHits(findOverlaps(x, ctls$RPS8))
x <- x[-RPS8_hits]
return(c(x, fake_ACTB))
})
x <- fake_read_gr
x
RPS8_hits <- queryHits(findOverlaps(x, ctls$RPS8))
x <- fake_read_gr[[1]]
RPS8_hits <- queryHits(findOverlaps(x, ctls$RPS8))
x <- x[-RPS8_hits]
c(x, fake_ACTB)
x
fake_ACTB
fake_read_gr <- subset(fake_read_gr, -read_id)
fake_read_gr
fake_read_gr <- lapply(fake_read_gr, function(x) {
return(subset(x, -read_id))
})
x <- fake_read_gr[[1]]
x
subset(x, -read_id)
return(subset(x, select=-read_id))
subset(x, select=-read_id)
fake_read_gr <- lapply(fake_read_gr, function(x) {
return(subset(x, select=-read_id))
})
# remove all hits with RPS8 regions and add fake ACTB reads:
fake_read_gr <- lapply(fake_read_gr, function(x) {
RPS8_hits <- queryHits(findOverlaps(x, ctls$RPS8))
x <- x[-RPS8_hits]
return(c(x, fake_ACTB))
})
# re-run log odds on the fake data set:
for ( j in 1:length(fake_read_gr) ) {
if (j==1) {
fake_ctl_read_odds <- list(lapply(ctls, oddsRatio, fake_read_gr[[j]]))
names(fake_ctl_read_odds)[j] <- names(fake_read_gr)[j]
} else {
fake_ctl_read_odds[[j]] <- lapply(ctls, oddsRatio, fake_read_gr[[j]])
names(fake_ctl_read_odds)[j] <- names(fake_read_gr)[j]
}
}
fake_ctl_read_odds <- lapply(fake_ctl_read_odds, function(x) {
return(do.call("rbind", x))
})
fake_ctl_read_odds
# make granges of 38 bp regions within ACTB annotation:
fake_ACTB2 <- fake_ACTB
region(fake_ACTB2) <- region(fake_ACTB2) + 10
ranges(fake_ACTB2) <- ranges(fake_ACTB2) + 10
fake_ACTB2
fake_ACTB
# make granges of 38 bp regions within ACTB annotation:
fake_ACTB2 <- fake_ACTB
start(ranges(fake_ACTB2)) <- start(ranges(fake_ACTB2)) + 10
# make granges of 38 bp regions within ACTB annotation:
fake_ACTB2 <- fake_ACTB
start(ranges(fake_ACTB2)) <- start(ranges(fake_ACTB2)) + 10
end(ranges(fake_ACTB2)) <- end(ranges(fake_ACTB2)) + 10
faker_ACTB <- c(fake_ACTB, fake_ACTB2)
faker_ACTB <- subset(faker_ACTB, select=-ID)
# add second lot of fake ACTB reads:
faker_read_gr <- lapply(fake_read_gr, function(x) {
return(c(x, fake_ACTB2))
})
for ( j in 1:length(faker_read_gr) ) {
if (j==1) {
faker_ctl_read_odds <- list(lapply(ctls, oddsRatio, faker_read_gr[[j]]))
names(faker_ctl_read_odds)[j] <- names(faker_read_gr)[j]
} else {
faker_ctl_read_odds[[j]] <- lapply(ctls, oddsRatio, faker_read_gr[[j]])
names(faker_ctl_read_odds)[j] <- names(faker_read_gr)[j]
}
}
faker_ctl_read_odds <- lapply(faker_ctl_read_odds, function(x) {
return(do.call("rbind", x))
})
faker_ctl_read_odds
lapply(fake_ctl_read_odds, head)
lapply(faker_ctl_read_odds, head)
comp <- data.frame(c(ctl_read_odds[[1]]$odds[1], fake_ctl_read_odds[[1]]$odds[1], faker_ctl_read_odds[[1]]$odds[1]), c(ctl_read_odds[[2]]$odds[1], fake_ctl_read_odds[[2]]$odds[1], faker_ctl_read_odds[[2]]$odds[1]))
comp
colnames(comp) <- c("H3K27me3", "H3K4me3")
comp
length(fake_ACTB)
rownames(comp) <- c("normal", "plus_109_fake_reads", "plus218_fake_reads")
comp
melt(comp)
library(dplyr)
melt(comp)
library(plyr)
melt(comp)
library(reshape)
melt(comp)
melt(comp, id=c("mark", "odds"))
?melt
comp
melt(comp, measure.vars=c("mark", "odds"))
melt(comp, measure.vars=c("H3K27me3", "H4K3me3"))
melt(comp, measure.vars=c("H3K27me3", "H3K4me3"))
melt(comp, id.vars="mark", measure.vars=c("H3K27me3", "H3K4me3"))
melt(comp, id = c("mark", "odds"), measure.vars=c("H3K27me3", "H3K4me3"))
comp <- melt(comp, measure.vars=c("H3K27me3", "H3K4me3"))
comp$type <- c("normal", "plus_109_fake_reads", "plus_218_fake_reads")
comp
comp$type <- paste0(comp$variable, comp$type)
comp$type
comp
p <- ggplot(aes(x=type, y=value))
p <- p + geom_bar()
p <- ggplot(comp, aes(x=type, y=value))
p <- p + geom_bar()
dev.off()
dev.off()
p
p <- p + geom_bar(stat="identity")
p
comp$value
class(comp$value)
df <- data.frame(dose=c("D0.5", "D1", "D2"),
len=c(4.2, 10, 29.5))
df
class(comp$type)
class(comp$value)
p <- ggplot(comp, aes(x=type, y=value))
p <- p + geom_bar(stat="identity")
p
p <- p + geom_bar(aes(fill=variable), stat="identity")
p
# make granges of 38 bp regions within ACTB annotation:
fake_ACTB <- ctls$ACTB[1:100]
fake_ACTB
rp_annot$ACTB[1:leng]
fake_odds <- function(leng) {
# make granges of 38 bp regions within ACTB annotation:
fake_ACTB <- ctls$ACTB[1:leng]
width(ranges(fake_ACTB)) <- 38
fake_ACTB <- subset(fake_ACTB, select=-ID)
fake_ACTB2 <- fake_ACTB
start(ranges(fake_ACTB2)) <- start(ranges(fake_ACTB2)) + 10
end(ranges(fake_ACTB2)) <- end(ranges(fake_ACTB2)) + 10
# remove all hits with RPS8 regions and add fake ACTB reads:
fake_read_gr <- lapply(fake_read_gr, function(x) {
RPS8_hits <- queryHits(findOverlaps(x, ctls$RPS8))
x <- x[-RPS8_hits]
return(c(x, fake_ACTB, fake_ACTB2))
})
# re-run log odds on the fake data set:
for ( j in 1:length(fake_read_gr) ) {
if (j==1) {
fake_ctl_read_odds <- list(lapply(ctls, oddsRatio, fake_read_gr[[j]]))
names(fake_ctl_read_odds)[j] <- names(fake_read_gr)[j]
} else {
fake_ctl_read_odds[[j]] <- lapply(ctls, oddsRatio, fake_read_gr[[j]])
names(fake_ctl_read_odds)[j] <- names(fake_read_gr)[j]
}
}
fake_ctl_read_odds <- lapply(fake_ctl_read_odds, function(x) {
return(do.call("rbind", x))
})
return(fake_ctl_read_odds)
}
fakes <- list(25, 50, 75, 100)
fakes <- lapply(fakes, fake_odds)
fakes
pos_ctl
neg_ctl
rm(list=ls())
# load packages needed:
library(tibble)
library(dplyr)
library(RColorBrewer)
library(RUVSeq)
library(ggplot2)
library(ggrepel)
library(preprocessCore)
library(edgeR)
library(org.Hs.eg.db)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
################################################################################
### Options ###
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_vs_FT ###
sTypes <- c("FT", "HGSOC")
sGroups <- list("FT", c("prPT", "rfPT", "arPT", "mrPT", "erPT"))
names(sGroups) <- sTypes
descrip <- "htseq_EdgeR_primary_HGSOC_vs_FT_with_chromatin_remodellers"
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_CCNEamp_vs_HRD ###
#sTypes <- c("bothDrivers", "FT", "HRD", "CCNEamp", "unknown_driver")
#descrip <- "htseq_EdgeR_primary_HGSOC_CCNEamp_vs_HRD"
################################################################################
################################################################################
### htseq_EdgeR_HGSOC_drug_cats_vs_FT ###
#sTypes <- c("FT", "primary_resistant", "acquired_resistant", "drug_responders",
#  "recurrent_ascites", "metastatic")
#sGroups <- list("FT", "prPT", "rfPT", "arPT", "mrPT", "erPT", "rcAF", "msST")
#names(sGroups) <- sTypes
#descrip <- "htseq_EdgeR_HGSOC_drug_cats_vs_FT"
################################################################################
################################################################################
### SalmonTE_primary_HGSOC_CCNEamp_vs_HRD ###
#sTypes <- c("bothDrivers", "FT", "HRD", "CCNEamp", "unknown_driver")
#descrip <- "SalmonTE_primary_HGSOC_CCNEamp_vs_HRD"
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_vs_FT_with_LINE1_silencers ###
#sTypes <- c("FT", "HGSOC")
#sGroups <- list("FT", c("prPT", "rfPT", "arPT", "mrPT", "erPT"))
#names(sGroups) <- sTypes
#descrip <- "htseq_EdgeR_primary_HGSOC_vs_FT_with_LINE1_silencers"
################################################################################
# define comparison parameters:
primaryOnly <- TRUE
cat_by_driver <- FALSE
EDAnormalise <- FALSE
count_tool <- "EdgeR"
customSamples <- FALSE
# define custom samples if needed:
#cus <- c("")
# specify what combination of repeat genes (repeats) and other genes,
# (all, both, other) should contribute to the results:
resultTypes <- c("repeats", "other")
# define sample group to use as control:
ctl <- "FT"
# specify what FDR and log2 fold change thresholds to use:
FDRthresh <- 0.1
FCthresh <- 0
# specify control genes to include:
posGeneIDs <- c("ENSG00000111640", "ENSG00000196776")
posGeneNames <- c("GAPDH", "CD47")
negGeneIDs <- c("ENSG00000075624", "ENSG00000169919")
negGeneNames <- c("beta-actin", "GUSB")
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
refDir <- paste0(projectDir, "/refs/")
rawDir <- paste0(projectDir,
"/RNA-seq/raw_files/fullsamples/bowtell_primary/")
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/")
newRobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/", descrip, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/", descrip, "/")
system(paste0("mkdir -p ", plotDir))
system(paste0("mkdir -p ", newRobjectDir))
# specify other genes to include if necessary:
other_df <- read.csv(paste0(refDir, "/chromatin_remodellers.csv"), header=T)
otherIDs <- other_df$ensembl_id
otherSym <- other_df$symbol
neg_ctl
i=2
ctlInd
readRDS(file = paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
lrt <- readRDS(file = paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
lrt
DEs <- summary(result <- decideTestsDGE((lrt)))
# fetch all gene DE info,
allGenes <- as.data.frame(topTags(lrt, n=Inf))
# annotate allGenes with entrez ids and symbols in separate columns:
egENSEMBL <- toTable(org.Hs.egENSEMBL)
egSYMBOL <- toTable(org.Hs.egSYMBOL)
allGenes$gene_id <- egENSEMBL$gene_id[match(rownames(allGenes), egENSEMBL$ensembl_id)]
allGenes$symbol <- egSYMBOL$symbol[match(allGenes$gene_id, egSYMBOL$gene_id)]
if (!(ctlInd==1)) {
if (i==1) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
} else {
if (i==2) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
}
# create threshold column for FC/FDR cutoff:
if (length(FCthresh) == 0) {
sigGenes <- filter(allGenes, FDR < FDRthresh)
allGenes$threshold <- as.factor(allGenes$FDR < FDRthresh)
} else {
sigGenes <- filter(allGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
allGenes$threshold <- as.factor((allGenes$FDR < FDRthresh & allGenes$logFC < -(FCthresh))|(allGenes$FDR <  FDRthresh & allGenes$logFC > FCthresh))
}
##############################################################################
### 4. Create DE data frames for repeats:
##############################################################################
# define repeat and sig DE repeat dfs:
repGenes <- allGenes[grep("ENS",  rownames(allGenes), invert = T),]
print(repGenes)
# add 'type' identifier column:
repGenes$type <- "repeat"
sig_rep <- subset(repGenes, threshold == T)
sig_Rep
sig_rep
tail(sig_rep)
plotDir
plotDir <- "/Users/jamestorpy/clusterHome//projects/hgsoc_repeats/RNA-seq/results/R/exp9/plots/DEplots/htseq_EdgeR_primary_HGSOC_vs_FT/"
write.table(sig_rep, paste0(plotDir, "/sig_reps_FDR<0.1.txt"), quote=F, sep = "\t")
# specify what FDR and log2 fold change thresholds to use:
FDRthresh <- 0.3
allGenes <- as.data.frame(topTags(lrt, n=Inf))
# annotate allGenes with entrez ids and symbols in separate columns:
egENSEMBL <- toTable(org.Hs.egENSEMBL)
egSYMBOL <- toTable(org.Hs.egSYMBOL)
allGenes$gene_id <- egENSEMBL$gene_id[match(rownames(allGenes), egENSEMBL$ensembl_id)]
allGenes$symbol <- egSYMBOL$symbol[match(allGenes$gene_id, egSYMBOL$gene_id)]
if (!(ctlInd==1)) {
if (i==1) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
} else {
if (i==2) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
}
# create threshold column for FC/FDR cutoff:
if (length(FCthresh) == 0) {
sigGenes <- filter(allGenes, FDR < FDRthresh)
allGenes$threshold <- as.factor(allGenes$FDR < FDRthresh)
} else {
sigGenes <- filter(allGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
allGenes$threshold <- as.factor((allGenes$FDR < FDRthresh & allGenes$logFC < -(FCthresh))|(allGenes$FDR <  FDRthresh & allGenes$logFC > FCthresh))
}
##############################################################################
### 4. Create DE data frames for repeats:
##############################################################################
# define repeat and sig DE repeat dfs:
repGenes <- allGenes[grep("ENS",  rownames(allGenes), invert = T),]
print(repGenes)
# add 'type' identifier column:
repGenes$type <- "repeat"
sig_rep <- subset(repGenes, threshold == T)
sig_rep
tail(sig_rep)
write.table(sig_rep, paste0(plotDir, "/sig_reps_FDR<0.3.txt"), quote=F, sep = "\t")
rm(list=ls())
DE <- readRDS("/Users/jamestorpy/clusterHome//projects/hgsoc_repeats/RNA-seq/Robjects/exp9/htseq_EdgeR_primary_HGSOC_vs_FT_with_chromatin_remodellers/custom3_DEallGenes.rds")
sigDE <- DE[DE$threshold == T,]
sigDE <- sigDE[order(sigDE$FDR),]
sigDE <- sigDE[order(sigDE$logFC, decreasing = T),]
sigDE <- sigDE[!is.na(sigDE$symbol),]
tail(sigDE, 50)
up50 <- head(sigDE, 50)
down50 <- tail(sigDE, 50)
up50
clean_sigDE <- sigDE[grep("MT|GOL|LINC", sigDE$gene_id, invert=T)]
clean_sigDE <- sigDE[grep("MT|GOL|LINC", sigDE$gene_id, invert=T),]
dim(sigDE)
dim(clean_sigDE)
grep("MT|GOL|LINC", sigDE$gene_id, invert=T)
grep("MT|GOL|LINC", sigDE$gene_id)
sigDE$gene_id
sigDE$symbol
clean_sigDE <- sigDE[grep("MT|GOL|LINC", sigDE$symbol),]
dim(clean_sigDE)
dim(sigDE)
clean_sigDE <- sigDE[grep("^MT|^GOL|^LINC", sigDE$symbol),]
dim(clean_sigDE)
clean_sigDE <- sigDE[grep("LINC", sigDE$symbol),]
dim(clean_sigDE)
clean_sigDE <- sigDE[grep("^MT|^GOL|^LINC", sigDE$symbol, invert=T),]
dim(clean_sigDE)
dim(sigDE)
up50 <- head(sigDE, 50)
down50 <- tail(sigDE, 50)
up50
clean_sigDE <- sigDE[grep("^MT|^GOL|^LINC|^MIR", sigDE$symbol, invert=T),]
up50 <- head(sigDE, 50)
down50 <- tail(sigDE, 50)
up50
clean_sigDE <- sigDE[grep("MT|GOL|LINC|MIR", sigDE$symbol, invert=T),]
up50 <- head(clean_sigDE, 50)
down50 <- tail(clean_sigDE, 50)
clean_sigDE <- sigDE[grep("^MT|^GOL|^LINC|^MIR", sigDE$symbol, invert=T),]
up50 <- head(clean_sigDE, 50)
down50 <- tail(clean_sigDE, 50)
up50
down50
write.table(up50, file="/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/results/R/exp9/plots/DEplots/htseq_EdgeR_primary_HGSOC_vs_FT/top_50_up_genes_allsymbols_DE.txt", quote=F, sep="\t")
write.table(down50, file="/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/results/R/exp9/plots/DEplots/htseq_EdgeR_primary_HGSOC_vs_FT/top_50_down_genes_allsymbols_DE.txt", quote=F, sep="\t")
