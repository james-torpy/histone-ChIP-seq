# to qsub snakemake:
#source activate snakemake
#briR
#module load 

#qsub -q short.q -N ChIP_chapman-rothe_2013_hg19 -b y -wd /share/ScratchGeneral/jamtor/projects/hgsoc_repeats/histone-ChIP-seq/chapman-rothe_2013_hg19/ \
#-j y -R y -pe smp 25 -V \
#"snakemake -s /share/ScratchGeneral/jamtor/projects/hgsoc_repeats/histone-ChIP-seq/chapman-rothe_2013/Snakefile \
#--cores 24"

import os
import re

exp_name = 'chapman-rothe_2013_hg19'

home_dir = '/share/ScratchGeneral/jamtor/'
project_dir = home_dir + 'projects/hgsoc_repeats/histone-ChIP-seq/' + exp_name + '/'
fastq_dir = 'raw_files/fastq/'
if not os.path.exists(project_dir + 'raw_files/fastq/'):
	os.makedirs(project_dir + 'raw_files/fastq/')

SAMPLES = [ re.sub('\\_pass.fastq.gz', '', x) for x in list(os.walk(fastq_dir))[0][2] ]

print(SAMPLES)

input_sample = 'HGSOC_input_SRR600983'

# define/create directories:
sra_dir = 'raw_files/sra/'

fastqc_dir = 'results/fastqc/'
if not os.path.exists(project_dir + 'results/fastqc/'):
	os.makedirs(project_dir + 'results/fastqc/')

bwa_dir = 'results/bwa/'
if not os.path.exists(project_dir + 'results/bwa/'):
	os.makedirs(project_dir + 'results/bwa/')

rule all:
	input:
		expand(bwa_dir + '{sample}.sorted.rmdup.bam.bai', sample=SAMPLES),
		expand(bwa_dir + '{sample}.sorted.bam.bai', sample=SAMPLES)

rule bwa_index:
	input:
		'genomes/repeats/hg19_all_repbase.fa'
	output:
		'genomes/repeats/bwa/hg19_all_repbase.bwa.amb'
	shell:
		'bwa index -p genomes/repeats/bwa/hg19_all_repbase.bwa {input}'

rule bwa_align:
	input:
		fasq = fastq_dir + '{sample}_pass.fastq.gz'
	output:
		temp(bwa_dir + '{sample}.sai')
	threads: 8
	shell:
		'bwa aln -f {output} genomes/repeats/bwa/hg19_all_repbase.bwa {input.fasq}'

rule bwa_samse:
	input:
		sai = bwa_dir + '{sample}.sai',
		fq = fastq_dir + '{sample}_pass.fastq.gz'
	output:
		temp(bwa_dir + '{sample}.sam')
	shell:
		'bwa samse -f {output} genomes/repeats/bwa/hg19_all_repbase.bwa \
			{input.sai} {input.fq}'

rule samtools_filter:
	input:
		bwa_dir + '{sample}.sam'
	output:
		bwa_dir + '{sample}.sorted.bam'
	shell:
		'samtools view -u -F260 {input}  | samtools sort -o {output} \
		-O bam -T ' + bwa_dir + '{wildcards.sample}.tmp -@ 2 -'

rule samtools_index:
	input:
		bwa_dir + '{sample}.sorted.bam'
	output:
		temp(bwa_dir + '{sample}.sorted.bam.bai')
	shell:
		'samtools index {input}'

rule remove_dupes:
	input:
		bam = bwa_dir + '{sample}.sorted.bam',
		bai = bwa_dir + '{sample}.sorted.bam.bai'
	output:
		rmdup = bwa_dir + '{sample}.sorted.rmdup.bam',
		met = temp(bwa_dir + '{sample}.sorted.rmdupmet.bam')
	threads: 2
	shell:
		'java -jar /home/jamtor/local/lib/picard/build/libs/picard.jar \
		MarkDuplicates I={input.bam} O={output.rmdup} M={output.met} \
		REMOVE_DUPLICATES=true VALIDATION_STRINGENCY=LENIENT'

rule samtools_index2:
	input:
		bwa_dir + '{sample}.sorted.rmdup.bam'
	output:
		bwa_dir + '{sample}.sorted.rmdup.bam.bai'
	shell:
		'samtools index {input}'
